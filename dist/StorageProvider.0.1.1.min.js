const config={storageType:"local"};function _Key(e){if(null==e)throw new Error("Please pass in valid key.");if("string"!=typeof e)throw new Error("The data type of the key must be a string.");if("string"==typeof e&&""===e.trim())throw new Error("The key cannot be an empty string.");return e}function _Value(e){if(null==e)throw new Error("There must be a value for the content that needs to be saved.");return e}function _Array(e,r){if(!Array.isArray(e))throw new Error("Input parameter must be an array.");if(0===e.length)throw new Error("A valid item must exist in the array.");for(let t=0;t<e.length;t++)if(typeof e[t]!==r)throw new Error(`All items in the array must be ${r}s.`);return e}function _Object(e){if(null==e||Array.isArray(e)||"object"!=typeof e)throw new Error("Invalid data type: The parameter passed in by this method must be of type object.");{const r=(()=>{for(const r in e)if(e.hasOwnProperty(r))return null!=e[r]})();if("{}"!==JSON.stringify(e)&&!0===r)return e;throw new Error("Object is empty or there is an invalid value in the object.")}}function getValueFromStorage(e,r){const t=_Key(r),o=e.getItem(t);return o?JSON.parse(o):null}function setValueToStorage(e,r,t){const o=_Key(r),n=_Value(t);e.setItem(o,JSON.stringify(n))}function _Store(e,r,t){return null==t?getValueFromStorage(e,r):null==t?getValueFromStorage(e,r):void setValueToStorage(e,r,t)}function _All(e){const r={};for(let t=0;t<e.length;t++){const o=e.key(t),n=getValueFromStorage(e,o);r[o]=n}return r}function _ObjectValue(e,r){const t=_Object(r);for(const o in t)r.hasOwnProperty(o)&&_Store(e,o,r[o])}function _ObjectMany(e,r){r.forEach(r=>{const t=_Object(r);if(!t.key||!t.value||null===t.key||void 0===t.key||null===t.value||void 0===t.value)throw new Error("Array items must be objects that contain valid keys and valid value properties.");_Store(e,t.key,t.value)})}function _Set(e,r){if(r.length<=0||r.length>2)throw new Error("Effective parameters must exist and the number of parameters must not exceed 2");if(1===r.length)if(Array.isArray(r[0]))_ObjectMany(e,_Array(r[0],"object"));else{if("object"!=typeof r[0]||Array.isArray(r[0]))throw new Error("If only one parameter is passed in, the type of the parameter must be array or object.");_ObjectValue(e,_Object(r[0]))}else if(2===r.length){if("string"!=typeof r[0]||void 0===r[1]||null===r[1])throw new Error("If two parameters are passed in, the first parameter must be of type string, and the second parameter must exist and be valid.");_Store(e,_Key(r[0]),_Value(r[1]))}}function _Remove(e,r,t){if(r&&null!=t){const r=_Key(t);e.removeItem(r)}else e.clear()}const type=config.storageType;class StorageProvider{constructor(e=type){if("local"!==e&&"session"!==e)throw new Error("Invalid storage type. Must be 'local' or 'session'.");this._storage=(()=>{if(window&&!window.plus)return"session"===e?sessionStorage:localStorage;if(window.plus&&window.plus.storage)return"session"===e?plus.storage:plus.storage.getStorageSync();throw new Error("Unknown environment, unable to determine storage method.")})()}Storage(e,r){try{return _Store(this._storage,e,r)}catch(e){console.error(e)}}Save(e,r){try{const t=_Key(e),o=_Value(r);_Store(this._storage,t,o)}catch(e){console.error(e)}}SaveMany(e){try{const r=_Array(e,"object");_ObjectMany(this._storage,r)}catch(e){console.error(e)}}Set(...e){try{_Set(this._storage,e)}catch(e){console.error(e)}}Get(e){try{return _Store(this._storage,e)}catch(e){console.error(e)}}GetMany(e){try{const r=_Array(e,"string");let t=[];for(let e of r){let r={[e]:_Store(this._storage,e)};t.push(r)}return t}catch(e){console.error(e)}}GetAll(){try{return _All(this._storage)}catch(e){console.error(e)}}Delete(e){try{_Remove(this._storage,!0,e)}catch(e){console.error(e)}}Remove(e){try{const r=_Key(e);_Remove(this._storage,!0,r)}catch(e){console.error(e)}}RemoveMany(e){try{const r=_Array(e,"string");for(let e of r)_Remove(this._storage,!0,e)}catch(e){console.error(e)}}Clean(){try{_Remove(this._storage,!1)}catch(e){console.error(e)}}}const $Storage=new StorageProvider(config.storageType);export{$Storage,StorageProvider};